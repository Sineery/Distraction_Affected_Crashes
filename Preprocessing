from tqdm import tqdm
from time import sleep # A tool of progress bar for time control
import pandas as pd
import numpy as np

url = 'https://simple.wikipedia.org/wiki/List_of_cities,_towns,_and_villages_in_Louisiana'
df_city = pd.read_html(url, header = 0)
df_city = df_city[0].dropna(axis=0, thresh=4)
df_city.drop('#', axis = 1, inplace = True) # Create the city information dataframe about the population

df2006 = pd.read_csv('crash2006.csv')
df2007 = pd.read_csv('crash2007.csv')
df2008 = pd.read_csv('crash2008.csv')
df2009 = pd.read_csv('crash2009.csv')
df2010 = pd.read_csv('crash2010.csv')
df2011 = pd.read_csv('crash2011.csv')
df2012 = pd.read_csv('crash2012.csv')
df2013 = pd.read_csv('crash2013.csv')
df2014 = pd.read_csv('crash2014.csv')
df2015 = pd.read_csv('crash2015.csv') # Read ten years databases

frames = [df2006, df2007, df2008, df2009, df2010, df2011, df2012, df2013, df2014, df2015]
df = pd.concat(frames) # Merge ten years dataframes

def remove_symbols(): # Remove noise data in dataframe
    for i in tqdm(df.columns):
        df[str(i)] = df[str(i)].replace('?', np.NaN)
        df[str(i)] = df[str(i)].replace(' ', np.NaN)
        sleep(0.1)
        
def delete_columns(col_name):
    df.drop(str(col_name), axis = 1, inplace = True)
    
''' Start merge dataframe of city to ten years' dataframe '''    
df['CITY'] = df['CITY'].str.lower()
df_city['Name'] = df_city['Name'].str.lower()
df_city.drop('Type', axis=1, inplace = True)
df_city.drop('Population', axis=1, inplace = True)
df = df.merge(df_city[['Name', 'level']], left_on = 'CITY', right_on = 'Name', how = 'left')
df.rename(columns={'level': 'city_level'}, inplace=True)
    
delete_columns('Name')
delete_columns('CITY')
''' Finish merge '''

''' Start clean dataframe '''
def remove_noise(): 
    for i in tqdm(['Y', 'Z']):
        df['ROAD_TYPE_CD'] = df['ROAD_TYPE_CD'].replace(str(i), np.NaN)
        df['ALIGNMENT_CD'] = df['ALIGNMENT_CD'].replace(str(i), np.NaN)
        df['ROAD_COND_CD'] = df['ROAD_COND_CD'].replace(str(i), np.NaN)
        df['LIGHTING_CD'] = df['LIGHTING_CD'].replace(str(i), np.NaN)
        df['SURF_COND_CD'] = df['SURF_COND_CD'].replace(str(i), np.NaN)
        df['WEATHER_CD'] = df['WEATHER_CD'].replace(str(i), np.NaN)
        sleep(0.1)
    for m in tqdm(['F', 'I', 'J', 'K', 'L', 'Y', 'Z', 'G', 'H', 'M']):
        df['SURF_TYPE_CD'] = df['SURF_TYPE_CD'].replace(str(m), np.NaN)
        sleep(0.1)
    for i in tqdm(['B', 'D', 'E', 'F']):
        df.loc[df['LIGHTING_CD'] == str(i), 'LIGHTING_CD'] = 'B'
    df['LOC_TYPE_CD'] = df['LOC_TYPE_CD'].replace('Z', np.NaN)
    df['DR_SEX'] = df['DR_SEX'].replace('U', np.NaN)
    df['DR_SEX'] = df['DR_SEX'].replace('W', 'F')
    df['DR_SEX'] = df['DR_SEX'].replace('B', 'M')
    df['CRASH_YEAR'] = df['CRASH_YEAR'].replace(1901, np.NaN)
    df['CRASH_YEAR'] = df['CRASH_YEAR'].replace(2005, 2006)
    df['CRASH_YEAR'] = df['CRASH_YEAR'].replace(2004, 2006)
    df['CRASH_YEAR'] = df['CRASH_YEAR'].replace(2000, np.NaN)
    df['CRASH_YEAR'] = df['CRASH_YEAR'].replace(2002, np.NaN)
    df['CRASH_YEAR'] = df['CRASH_YEAR'].replace(1936, np.NaN)

def redefine_contribute_factor():
    for i in tqdm(['A', 'B', 'D', 'H', 'I']):
        df['PRI_CONTRIB_FAC_CD'] = df['PRI_CONTRIB_FAC_CD'].replace(str(i), np.NaN)
        df['SEC_CONTRIB_FAC_CD'] = df['SEC_CONTRIB_FAC_CD'].replace(str(i), np.NaN)
        sleep(0.1)
    for j in tqdm(['C', 'E', 'F', 'G', 'J', 'K', 'L', 'M']):
        df.loc[(df['PRI_CONTRIB_FAC_CD'].isnull == True) & (df['SEC_CONTRIB_FAC_CD'] == str(j)), 'PRI_CONTRIB_FAC_CD'] = str(j)
        sleep(0.1)

def define_age_group():
    df.loc[(df['DR_AGE'].astype(float) <= 25) & (df['DR_AGE'].astype(float) >= 0), 'age_group'] = 'A'
    df.loc[(df['DR_AGE'].astype(float) > 25) & (df['DR_AGE'].astype(float) <= 35), 'age_group'] = 'B'
    df.loc[(df['DR_AGE'].astype(float) > 35) & (df['DR_AGE'].astype(float) <= 45), 'age_group'] = 'C'
    df.loc[(df['DR_AGE'].astype(float) > 45) & (df['DR_AGE'].astype(float) <= 55), 'age_group'] = 'D'
    df.loc[(df['DR_AGE'].astype(float) > 55) & (df['DR_AGE'].astype(float) <= 65), 'age_group'] = 'E'
    df.loc[(df['DR_AGE'].astype(float) > 65) & (df['DR_AGE'].astype(float) <= 199), 'age_group'] = 'F'

def define_time_group():
    df.loc[(df['CR_HOUR'].astype(float) >= 4) & (df['CR_HOUR'].astype(float) <= 7), 'crash_time'] = 'A'
    df.loc[(df['CR_HOUR'].astype(float) >= 8) & (df['CR_HOUR'].astype(float) <= 11), 'crash_time'] = 'B'
    df.loc[(df['CR_HOUR'].astype(float) >= 12) & (df['CR_HOUR'].astype(float) <= 15), 'crash_time'] = 'C'
    df.loc[(df['CR_HOUR'].astype(float) >= 16) & (df['CR_HOUR'].astype(float) <= 19), 'crash_time'] = 'D'
    df.loc[(df['CR_HOUR'].astype(float) >= 20) & (df['CR_HOUR'].astype(float) <= 23), 'crash_time'] = 'E'
    df.loc[(df['CR_HOUR'].astype(float) == 24) | (df['CR_HOUR'].astype(float) <= 3), 'crash_time'] = 'F'

def re_define_vehicle_type(): 
    df['VEH_TYPE_CD'] = df['VEH_TYPE_CD'].str.upper()
    df.loc[(df['VEH_TYPE_CD'] == 'A') | (df['VEH_TYPE_CD'] == 'C') | (df['VEH_TYPE_CD'] == 'S'), 'vehicle_type'] = 'A'
    df.loc[df['VEH_TYPE_CD'] == 'B', 'vehicle_type'] = 'B'
    df.loc[df['VEH_TYPE_CD'] == 'D', 'vehicle_type'] = 'C'
    df.loc[(df['VEH_TYPE_CD'] == 'E') | (df['VEH_TYPE_CD'] == 'F'), 'vehicle_type'] = 'D'
    df.loc[df['VEH_TYPE_CD'] == 'G', 'vehicle_type'] = 'E'
    df.loc[df['VEH_TYPE_CD'] == 'H', 'vehicle_type'] = 'F'
    df.loc[df['VEH_TYPE_CD'] == 'I', 'vehicle_type'] = 'G'
    truck_list =  ['J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'T', 'V']
    df.loc[df['VEH_TYPE_CD'].isin(truck_list) == True, 'vehicle_type'] = 'H'
    
def External_Internal_distract():
    list_distraction = ['A', 'B', 'C', 'D']
    list_condition = ['B', 'C']
    df.loc[df['DR_DISTRACT_CD'].isin(list_distraction), 'Distraction_Label'] = 'External'
    df.loc[(df['DR_DISTRACT_CD'].isin(list_distraction) == False) & (df['DR_COND_CD'].isin(list_condition)), 'Distraction_Label'] = 'Internal'
    df.loc[(df['Distraction_Label'] != 'Internal') & (df['Distraction_Label'] != 'External'), 'Distraction_Label'] = 'None'


def New_distraction_contidion():
    list_distract = ['A', 'B', 'C', 'D']
    list_condition = ['B', 'C']
    for i in tqdm(list_distract):
        df.loc[df['DR_DISTRACT_CD'] == str(i), 'drive_distract'] = str(i)
        sleep(0.1)
    df.loc[(df['DR_DISTRACT_CD'].isin(list_distract) == False) & (df['DR_COND_CD'].isin(list_condition)), 'drive_distract'] = 'E'
    df.loc[df['DR_COND_CD'] == 'D', 'drive_condition'] = 'ill'
    df.loc[df['DR_COND_CD'] == 'K', 'drive_condition'] = 'ill'
    df.loc[df['DR_COND_CD'] == 'E', 'drive_condition'] = 'fatigue'
    df.loc[df['DR_COND_CD'] == 'F', 'drive_condition'] = 'fatigue'
    df.loc[df['DR_COND_CD'] == 'G', 'drive_condition'] = 'd&d'
    df.loc[df['DR_COND_CD'] == 'H', 'drive_condition'] = 'd&d'
    df.loc[df['DR_COND_CD'] == 'I', 'drive_condition'] = 'd&d'
    df.loc[df['DR_COND_CD'] == 'J', 'drive_condition'] = 'd&d'
    list_distract_num = ['G', 'H', 'I', 'J']
    df.loc[(df['DR_COND_CD'].isin(list_distract_num) == False) & (df['DRUGS'].astype(float) == 1), 'drive_condition'] = 'd&d'
    df.loc[(df['DR_COND_CD'].isin(list_distract_num) == False) & (df['ALCOHOL'].astype(float) == 1), 'drive_condition'] = 'd&d'
     
    
def in_out_state():
    df['DR_STATE'] = df['DR_STATE'].str.upper()
    df.loc[(df['DR_STATE'] == 'LA') | (df['DR_STATE'] == 'LOUISIANA'), 'From_Louisiana'] = 'Yes'
    df.loc[(df['DR_STATE'] != 'LA') & (df['DR_STATE'] != 'LOUISIANA'), 'From_Louisiana'] = 'No'

def define_vehicle_year():
    df['VEH_YEAR'] = pd.to_numeric(df['VEH_YEAR'], errors = 'coerce')
    df.loc[(df['VEH_YEAR'] <= 1985) & (df['VEH_YEAR'] > 1600), 'vehicle_year'] = 'A'
    df.loc[(df['VEH_YEAR'] > 1985) & (df['VEH_YEAR'] <= 1990), 'vehicle_year'] = 'B'
    df.loc[(df['VEH_YEAR'] > 1990) & (df['VEH_YEAR'] <= 1995), 'vehicle_year'] = 'C'
    df.loc[(df['VEH_YEAR'] > 1995) & (df['VEH_YEAR'] <= 2000), 'vehicle_year'] = 'D'
    df.loc[(df['VEH_YEAR'] > 2000) & (df['VEH_YEAR'] <= 2005), 'vehicle_year'] = 'E'
    df.loc[(df['VEH_YEAR'] > 2005) & (df['VEH_YEAR'] <= 2010), 'vehicle_year'] = 'F'
    df.loc[df['VEH_YEAR'] > 2010, 'vehicle_year'] = 'G'

def clean_hwy_type():
    for item in tqdm(['A', 'B', 'C', 'D', 'E', 'G']):
        df.loc[df['HWY_TYPE_CD'].str.contains(str(item), case = False) == True, 'highway_type'] = str(item)
        sleep(0.1)
 
def clean_manner_collision():
    for item in tqdm(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']):
        df.loc[df['MAN_COLL_CD'].str.contains(str(item), case = False) == True, 'manner_of_collision'] = str(item)
        sleep(0.1)
    df.loc[(df['manner_of_collision'] == 'E') | (df['manner_of_collision'] == 'F') | (df['manner_of_collision'] == 'G'), 'manner_of_collision'] = 'E'
    df.loc[(df['manner_of_collision'] == 'H') | (df['manner_of_collision'] == 'I'), 'manner_of_collision'] = 'F'
    df.loc[(df['manner_of_collision'] == 'J') | (df['manner_of_collision'] == 'K'), 'manner_of_collision'] = 'G'
   

def clean_num_occ():
    df.loc[df['NUM_OCC'].astype(float) == 1, 'num_occupant'] = 'One'
    df.loc[df['NUM_OCC'].astype(float) == 2, 'num_occupant'] = 'Two'
    df.loc[df['NUM_OCC'].astype(float) == 3, 'num_occupant'] = 'Three'
    f.loc[df['NUM_OCC'].astype(float).isin(range(1,4)) == False , 'num_occupant'] = 'More_than_Three'

def clean_num_veh():
    df.loc[df['NUM_VEH'] == 1, 'num_vehicle'] = 'One'
    df.loc[df['NUM_VEH'] == 2, 'num_vehicle'] = 'Two'
    df.loc[df['NUM_VEH'] >= 3, 'num_vehicle'] = 'More_than_two'

def clean_aggressive():
    df.loc[df['agressive'] >= 1, 'aggressive_driving'] = 'Yes'
    df.loc[df['agressive'] == 0, 'aggressive_driving'] = 'No'
    
delete_columns('Unnamed: 0')
delete_columns('NUM_DRI_IK')
delete_columns('NUM_DRI_INJ')
delete_columns('NUM_DRI_KIL')
delete_columns('NUM_OCC_IK')
delete_columns('NUM_OCC_INJ')
delete_columns('NUM_OCC_KIL')
delete_columns('NUM_PED_IK')
delete_columns('NUM_PED_INJ')
delete_columns('NUM_PED_KIL')
delete_columns('NUM_TOT_IK')
delete_columns('violation')

remove_symbols()
remove_noise()

redefine_contribute_factor()
delete_columns('SEC_CONTRIB_FAC_CD')

define_age_group()
delete_columns('DR_AGE')

define_time_group()
delete_columns('CR_HOUR')

re_define_vehicle_type()
delete_columns('VEH_TYPE_CD')

in_out_state()
delete_columns('DR_STATE')

define_vehicle_year()
delete_columns('VEH_YEAR')

clean_hwy_type()
delete_columns('HWY_TYPE_CD')

clean_manner_collision()
delete_columns('MAN_COLL_CD')

clean_num_occ()
delete_columns('NUM_OCC')

clean_num_veh()
delete_columns('NUM_VEH')

clean_aggressive()
delete_columns('agressive')


#re_define_distraction()
External_Internal_distract()
New_distraction_contidion()
delete_columns('DR_DISTRACT_CD')
delete_columns('DR_COND_CD')
delete_columns('DRUGS')
delete_columns('ALCOHOL')
''' Finish clean '''

for xxx in df.columns:
    print(df[str(xxx)].value_counts()) # Final check if any abnormal exists

df.to_csv('10yrs_In_Ex_label.csv', index = False) # Output the preprocessed dataframe
